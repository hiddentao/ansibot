mixin renderUrlTemplate(urlTemplate)
  span.urlTemplate
    span.path #{urlTemplate.path}
    if !_.isEmpty(urlTemplate.queryParams)
      span ?
      span.params
        - each meta,name in urlTemplate.queryParams
          span.param(title=meta.desc)
            span.name #{name}
            span =
            span.value #{meta.value}
          span.qryStringSpacer &

mixin renderLogTable(logs, hideTriggerColumn, hideJobColumn)
  if 0 < logs.length
    .logs
      table.list
        thead
          th.time Time

          if !hideTriggerColumn
            th.trigger Trigger

          if !hideJobColumn
            th.job Job

          th.text Text
        - each log in logs
          tr
            td.time #{prettyPrintTimestamp(log.created_at)}

            if !hideTriggerColumn
              - var triggerName = log.trigger.description || log.trigger;
              td.trigger 
                a(title="View trigger", href="/triggers/" + (log.trigger._id || log.trigger)) #{triggerName}

            if !hideJobColumn
              td.job 
                a(title="View job", href=log.job.viewUrl) #{log.job._id}

            - var textTdClass = (log.meta && log.meta.console ? 'console ': '')
            - var errorClass = (log.meta && log.meta.error ? 'error ': '')
            - var warningClass = (log.meta && log.meta.warning ? 'warning ': '')
            td(class="text " + textTdClass)
              if log.meta && (log.meta.console || log.meta.code)
                +renderExpandableChunk(log.text, true, errorClass + warningClass)
              else
                +renderExpandableChunk(log.text, false, errorClass + warningClass)

              // additional data
              if log.meta && log.meta.data
                ul.data
                - each v,k in log.meta.data
                  li
                    code #{k}: #{v}

  else
    em No logs found



mixin renderJobTable(logs, showTrigger)
  if 0 < jobs.length
    .jobs
      table.list
        thead
          th.job Job
          if showTrigger
            th.trigger Trigger
          th.time Time
          th.source Source
          th.status Status
        - each job in jobs
          tr
            td.job
              a(href=job.viewUrl) #{job._id}
            if showTrigger
              td.trigger
                a(href=job.trigger.viewUrl) #{job.trigger.description}
            td.time #{prettyPrintTimestamp(job.created_at)}
            td.source #{job.source}
            td.status
              - var resultClass = ('failed' === job.status ? 'error': '')
              span(class=resultClass) #{job.status}
  else
    em No jobs found



mixin renderExpandableChunk(text, isCode, cssClasses)
  - text = text || ''
  - cssClasses = cssClasses || ''
  - var preview = text.substr(0, 100)
  - var tooLong = preview.length < text.length

  div(class=(tooLong ? 'expandable': ''))
    if isCode
      if tooLong
        pre(class=cssClasses + ' collapsed') #{preview}
          span.indicator Click to expand
        pre(class=cssClasses + ' expanded') #{text}
      else
        pre(class=cssClasses) #{text}
    else
      if tooLong
        div(class=cssClasses + ' collapsed') #{preview}
          span.indicator Click to expand
        div(class=cssClasses + ' expanded') #{text}
      else
        div(class=cssClasses) #{text}





mixin form(form, submitBtnText)
  if error
    div.error #{error.msg}

  - var fieldErrors = error ? error.errors : {}

  form(method="POST")
    - each fieldName in form.order
      div.field
        - var field = form.fields[fieldName]
        label #{field.label}
        if "text" == field.type
          input(name=field.name, type="text", value=field.value)
        else if "select" == field.type  
          select(name=field.name, value=field.value)
            - each label, val in field.options
                option(value=val) #{label}

        if field.helpText
          .help #{field.helpText}

        if fieldErrors[fieldName]
          - each errorMeta, errorId in fieldErrors[fieldName].errors
            div.error #{errorMeta.msg}


    input(type="submit", value=submitBtnText)

